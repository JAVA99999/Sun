apply plugin: 'com.android.application'

import groovy.swing.SwingBuilder

android {
    signingConfigs {
        release {
            keyAlias 'laiyifen'
            keyPassword ''
            storeFile file('./keystore/laiyifen.key')
            storePassword ''
        }
    }

    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName

        manifestPlaceholders = [
                JPUSH_PKGNAME: rootProject.ext.android.applicationId,
                JPUSH_APPKEY : rootProject.ext.push.JPUSH_APPKEY,
                JPUSH_CHANNEL: rootProject.ext.push.JPUSH_CHANNEL,
        ]
    }

    buildTypes {

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }


    configurations.all {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            def requested = details.requested
            //System.out.println("===" + requested.group + ":" + requested.name + ":" + requested.version + "===")
            if (requested.group == 'com.android.support') {
                details.useVersion '26.1.0'
            }
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'
    //路由
    annotationProcessor project(':library:compiler')
    compile project(':library:pickerphoto')
    compile project(':library:baselibrary')
    compile project(':library:push')
    compile project(':library:share')
    compile project(':library:bridge')
    compile project(':library:pay')

    if (!rootProject.ext.android.guideIsApp) {
        compile project(':guide')
    }
    if (!rootProject.ext.android.loginIsApp) {
        compile project(':login')
    }
    if (!rootProject.ext.android.tradeIsApp) {
        compile project(':trade')
    }
    if (!rootProject.ext.android.userCenterIsApp) {
        compile project(':usercenter')
    }
}

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.hasTask(':app:assembleRelease') || taskGraph.hasTask(':app:assembleDebug')) {
        def storePass = ''
        def keyPass = ''
        if (System.console() == null) {
            new SwingBuilder().edt {
                dialog(modal: true, title: '输入证书密码', alwaysOnTop: true, resizable: false, locationRelativeTo: null, pack: true, show: true) {
                    vbox { // Put everything below each other
                        label(text: "请输入storePassword:   ")
                        def input1 = passwordField()
                        label(text: "请输入keyPassword:    ")
                        def input2 = passwordField()
                        button(defaultButton: true, text: '确定', actionPerformed: {
                            storePass = input1.password;
                            keyPass = input2.password;
                            dispose();
                        })
                    }
                }
            }
        } else {
            storePass = System.console().readPassword("\nPlease enter store passphrase: ")
            keyPass = System.console().readPassword("\nPlease enter key passphrase: ")
        }

        if (storePass.size() <= 0 || keyPass.size() <= 0) {
            throw new InvalidUserDataException("You must enter the passwords to proceed.")
        }

        storePass = new String(storePass)
        keyPass = new String(keyPass)

        android.signingConfigs.release.storePassword = storePass
        android.signingConfigs.release.keyPassword = keyPass
    }
}
